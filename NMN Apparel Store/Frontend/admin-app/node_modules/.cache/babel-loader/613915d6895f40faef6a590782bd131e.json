{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\n\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  DuplicateStaticBlock: \"Duplicate static block in the same class\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { %0 as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, errorTemplate, ...params) {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, \"object destructuring pattern\", ...args);\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n    }\n  }\n\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.method) {\n      return;\n    }\n\n    super.checkProto(prop, isRecord, protoRef, refExpressionErrors);\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) == null ? void 0 : _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types.decimal:\n        return this.estreeParseDecimalLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n};\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = void 0;\n    this.isExpr = void 0;\n    this.preserveSpace = void 0;\n    this.override = void 0;\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\n\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && this.hasPrecedingLineBreak()) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.braceHashL.updateContext = function () {\n  this.state.context.push(types$1.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords$1 = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst SCOPE_OTHER = 0b00000000,\n      SCOPE_PROGRAM = 0b00000001,\n      SCOPE_FUNCTION = 0b00000010,\n      SCOPE_ARROW = 0b00000100,\n      SCOPE_SIMPLE_CATCH = 0b00001000,\n      SCOPE_SUPER = 0b00010000,\n      SCOPE_DIRECT_SUPER = 0b00100000,\n      SCOPE_CLASS = 0b01000000,\n      SCOPE_TS_MODULE = 0b10000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => {\n  var _temp;\n\n  return _temp = class extends superClass {\n    constructor(options, input) {\n      super(options, input);\n      this.flowPragma = void 0;\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes() {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums() {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type, val) {\n      if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment) {\n      if (this.flowPragma === undefined) {\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) ;else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || types.colon);\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate() {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(types.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n\n      if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n\n      if (this.eat(types.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(types.colon);\n      let type = null;\n      let predicate = null;\n\n      if (this.match(types.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n\n        if (this.match(types.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node) {\n      this.next();\n      this.flowParseInterfaceish(node, true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(node) {\n      this.next();\n      const id = node.id = this.parseIdentifier();\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(types.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(types.parenR);\n      [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n      this.resetEndLocation(id);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(node, insideModule) {\n      if (this.match(types._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(types._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(types._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(types.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(types._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(node) {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(true);\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node) {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(types.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = node.body = this.startNode();\n      const body = bodyNode.body = [];\n      this.expect(types.braceL);\n\n      while (!this.match(types.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(types._import)) {\n          this.next();\n\n          if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n            this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n          }\n\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n      this.expect(types.braceR);\n      this.finishNode(bodyNode, \"BlockStatement\");\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n          }\n\n          if (kind === \"ES\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(node, insideModule) {\n      this.expect(types._export);\n\n      if (this.eat(types._default)) {\n        if (this.match(types._function) || this.match(types._class)) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n\n        node.default = true;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n          throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n        }\n\n        if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n          node = this.parseExport(node);\n\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(node) {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(node) {\n      this.next();\n      this.flowParseTypeAlias(node);\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(node) {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(node) {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    flowParseInterfaceish(node, isClass = false) {\n      node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n      this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false\n      });\n    }\n\n    flowParseInterfaceExtends() {\n      const node = this.startNode();\n      node.id = this.flowParseQualifiedTypeIdentifier();\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node) {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word, startLoc, declaration) {\n      if (!reservedTypes.has(word)) return;\n      this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n    }\n\n    flowParseRestrictedIdentifier(liberal, declaration) {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    flowParseTypeAlias(node) {\n      node.id = this.flowParseRestrictedIdentifier(false, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(types.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(node, declare) {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(true, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.supertype = null;\n\n      if (this.match(types.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(types.colon);\n      }\n\n      node.impltype = null;\n\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(types.eq);\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    flowParseTypeParameter(requireDefault = false) {\n      const nodeStart = this.state.start;\n      const node = this.startNode();\n      const variance = this.flowParseVariance();\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(types.eq)) {\n        this.eat(types.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration() {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n      this.state.inType = true;\n\n      if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      } while (!this.isRelational(\">\"));\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType() {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n      node.extends = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false\n      });\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey() {\n      return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(node, isStatic, variance) {\n      node.static = isStatic;\n\n      if (this.lookahead().type === types.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n\n      this.expect(types.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(node, isStatic) {\n      node.static = isStatic;\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(types.bracketR);\n      this.expect(types.bracketR);\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n      } else {\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n      }\n\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(node) {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(types.parenL);\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n\n      this.expect(types.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(node, isStatic) {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    }) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const nodeStart = this.startNode();\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n      let endDelim;\n      let exact;\n      let inexact = false;\n\n      if (allowExact && this.match(types.braceBarL)) {\n        this.expect(types.braceBarL);\n        endDelim = types.braceBarR;\n        exact = true;\n      } else {\n        this.expect(types.braceL);\n        endDelim = types.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart = null;\n        let inexactStart = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(types.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (this.eat(types.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n          } else {\n            nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n          }\n        } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n\n            if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n          this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n        }\n      }\n\n      this.expect(endDelim);\n\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n      this.state.inType = oldInType;\n      return out;\n    }\n\n    flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n      if (this.eat(types.ellipsis)) {\n        const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n        let optional = false;\n\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n          node.method = false;\n\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    flowCheckGetterSetterParams(property) {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, ErrorMessages.BadGetterArity);\n        } else {\n          this.raise(start, ErrorMessages.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, ErrorMessages.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon() {\n      if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(types.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(startPos, startLoc, id) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType() {\n      const node = this.startNode();\n      this.expect(types._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType() {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(types.bracketL);\n\n      while (this.state.pos < this.length && !this.match(types.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(types.bracketR)) break;\n        this.expect(types.comma);\n      }\n\n      this.expect(types.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam() {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n\n      if (lh.type === types.colon || lh.type === types.question) {\n        name = this.parseIdentifier();\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(type) {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params = []) {\n      let rest = null;\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n\n      return {\n        params,\n        rest\n      };\n    }\n\n    flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    flowParsePrimaryType() {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case types.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n        case types.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true\n          });\n\n        case types.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false\n          });\n\n        case types.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case types.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(types.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(types.parenR);\n            this.expect(types.arrow);\n            node.returnType = this.flowParseType();\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n\n          break;\n\n        case types.parenL:\n          this.next();\n\n          if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n            if (this.match(types.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== types.question && token !== types.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n              this.expect(types.parenR);\n              return type;\n            } else {\n              this.eat(types.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case types.string:\n          return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n        case types._true:\n        case types._false:\n          node.value = this.match(types._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case types.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n\n            if (this.match(types.num)) {\n              return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            if (this.match(types.bigint)) {\n              return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n          }\n\n          throw this.unexpected();\n\n        case types.num:\n          return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n        case types.bigint:\n          return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n        case types._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case types._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case types._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case types.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType() {\n      const startPos = this.state.start,\n            startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n\n      while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(types.bracketL);\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n\n      return type;\n    }\n\n    flowParsePrefixType() {\n      const node = this.startNode();\n\n      if (this.eat(types.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens() {\n      const param = this.flowParsePrefixType();\n\n      if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n\n      return param;\n    }\n\n    flowParseIntersectionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation() {\n      if (this.state.type === types.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation() {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n      const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n      if (this.match(types.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n\n      return ident;\n    }\n\n    typeCastToParameter(node) {\n      node.expression.typeAnnotation = node.typeAnnotation;\n      this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n      return node.expression;\n    }\n\n    flowParseVariance() {\n      let variance = null;\n\n      if (this.match(types.plusMin)) {\n        variance = this.startNode();\n\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n\n      return variance;\n    }\n\n    parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(node, type, isMethod = false) {\n      if (this.match(types.colon)) {\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    parseStatement(context, topLevel) {\n      if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type === types.name || isKeyword(lookahead.value)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n\n    parseExpressionStatement(node, expr) {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(types.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    shouldParseExportDeclaration() {\n      return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier() {\n      if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n      if (!this.match(types.question)) return expr;\n\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n        if (!result.node) {\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(types.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let {\n        consequent,\n        failed\n      } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(types.colon);\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent() {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(types.colon);\n      this.state.noArrowParamsConversionAt.pop();\n      return {\n        consequent,\n        failed\n      };\n    }\n\n    getArrowLikeExpressions(node, disallowInvalid) {\n      const stack = [node];\n      const arrows = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n    }\n\n    finishArrowValidation(node) {\n      var _node$extra;\n\n      this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt(node, parse) {\n      let result;\n\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(node, startPos, startLoc) {\n      node = super.parseParenItem(node, startPos, startLoc);\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(types.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node) {\n      if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node) {\n      const decl = super.parseExport(node);\n\n      if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n\n      return decl;\n    }\n\n    parseExportDeclaration(node) {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(types.braceL)) {\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node) {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node) {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n\n      return hasNamespace;\n    }\n\n    parseClassId(node, isStatement, optionalId) {\n      super.parseClassId(node, isStatement, optionalId);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(classBody, member, state) {\n      const pos = this.state.start;\n\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n        }\n      }\n    }\n\n    getTokenFromCode(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 123 && next === 124) {\n        return this.finishOp(types.braceBarL, 2);\n      } else if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(types.relational, 1);\n      } else if (this.state.inType && code === 63) {\n        return this.finishOp(types.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node, isBinding) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\":\n          {\n            const last = node.properties.length - 1;\n            return node.properties.every((prop, i) => {\n              return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n            });\n          }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node, isLHS = false) {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableList(exprList, trailingCommaPos, isLHS) {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n\n        if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    toReferencedList(exprList, isParenthesizedExpr) {\n      for (let i = 0; i < exprList.length; i++) {\n        var _expr$extra;\n\n        const expr = exprList[i];\n\n        if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) == null ? void 0 : _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n      const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(expr, ...args) {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    parseClassProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassPrivateProperty(node);\n    }\n\n    isClassMethod() {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty() {\n      return this.match(types.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method) {\n      return !this.match(types.colon) && super.isNonstaticConstructor(method);\n    }\n\n    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    }\n\n    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node) {\n      super.parseClassSuper(node);\n\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented = node.implements = [];\n\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(true);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(types.comma));\n      }\n    }\n\n    parsePropertyName(node, isPrivateNameAllowed) {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      node.variance = variance;\n      return key;\n    }\n\n    parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n      if (prop.variance) {\n        this.unexpected(prop.variance.start);\n      }\n\n      delete prop.variance;\n      let typeParameters;\n\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(types.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param) {\n      if (this.eat(types.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        param.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(startPos, startLoc, left) {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node) {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n      specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    maybeParseDefaultImportSpecifier(node) {\n      node.importKind = \"value\";\n      let kind = null;\n\n      if (this.match(types._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n\n      if (kind) {\n        const lh = this.lookahead();\n\n        if (kind === \"type\" && lh.type === types.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    parseImportSpecifier(node) {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseModuleExportName();\n      let specifierTypeKind = null;\n\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n\n        if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        if (firstIdent.type === \"StringLiteral\") {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(specifier.local.name, specifier.local.start, true);\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseFunctionParams(node, allowModifiers) {\n      const kind = node.kind;\n\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    parseVarId(decl, kind) {\n      super.parseVarId(decl, kind);\n\n      if (this.match(types.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id);\n      }\n    }\n\n    parseAsyncArrowFromCallExpression(node, call) {\n      if (this.match(types.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    shouldParseAsyncArrow() {\n      return this.match(types.colon) || super.shouldParseAsyncArrow();\n    }\n\n    parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var _jsx;\n\n      let state = null;\n      let jsx;\n\n      if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n        state = this.state.clone();\n        jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n        if (!jsx.error) return jsx.node;\n        const {\n          context\n        } = this.state;\n\n        if (context[context.length - 1] === types$1.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === types$1.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (((_jsx = jsx) == null ? void 0 : _jsx.error) || this.isRelational(\"<\")) {\n        var _jsx2, _jsx3;\n\n        state = state || this.state.clone();\n        let typeParameters;\n        const arrow = this.tryParse(abort => {\n          var _arrowExpression$extr;\n\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n            const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n            this.resetStartLocationFromNode(result, typeParameters);\n            return result;\n          });\n\n          if (arrowExpression.type !== \"ArrowFunctionExpression\" && ((_arrowExpression$extr = arrowExpression.extra) == null ? void 0 : _arrowExpression$extr.parenthesized)) {\n            abort();\n          }\n\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n          return arrowExpression;\n        }, state);\n        let arrowExpression = null;\n\n        if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n          if (!arrow.error && !arrow.aborted) {\n            if (arrow.node.async) {\n              this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n        throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n    }\n\n    parseArrow(node) {\n      if (this.match(types.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          const typeNode = this.startNode();\n          [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(types.arrow)) this.unexpected();\n          return typeNode;\n        });\n        if (result.thrown) return null;\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow() {\n      return this.match(types.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(node, params) {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(node, allowDuplicates, isArrowFunction) {\n      if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow) {\n      return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n    }\n\n    parseSubscripts(base, startPos, startLoc, noCalls) {\n      if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n        const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n      if (this.match(types.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, true);\n      } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(types.parenL);\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(node, subscriptState.optionalChainMember);\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n    }\n\n    parseNewArguments(node) {\n      let targs = null;\n\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n      }\n\n      node.typeArguments = targs;\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(node, undefined, true);\n    }\n\n    readToken_mult_modulo(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 42 && next === 47 && this.state.hasFlowComment) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 124 && next === 125) {\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file, program) {\n      const fileNode = super.parseTopLevel(file, program);\n\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n\n      return fileNode;\n    }\n\n    skipBlockComment() {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n        }\n\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment() {\n      const {\n        pos\n      } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n\n      while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === 58 && ch3 === 58) {\n        return shiftToFirstNonWhiteSpace + 2;\n      }\n\n      if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n        return shiftToFirstNonWhiteSpace + 12;\n      }\n\n      if (ch2 === 58 && ch3 !== 58) {\n        return shiftToFirstNonWhiteSpace;\n      }\n\n      return false;\n    }\n\n    hasFlowCommentCompletion() {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n      }\n    }\n\n    flowEnumErrorBooleanMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n    }\n\n    flowEnumErrorInvalidMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n    }\n\n    flowEnumErrorDuplicateMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(pos, {\n      enumName,\n      suppliedType\n    }) {\n      return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n    }\n\n    flowEnumErrorInvalidMemberInitializer(pos, {\n      enumName,\n      explicitType,\n      memberName\n    }) {\n      let message = null;\n\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n\n        default:\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n    }\n\n    flowEnumMemberInit() {\n      const startPos = this.state.start;\n\n      const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n      switch (this.state.type) {\n        case types.num:\n          {\n            const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"number\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types.string:\n          {\n            const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"string\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types._true:\n        case types._false:\n          {\n            const literal = this.parseBooleanLiteral();\n\n            if (endOfInit()) {\n              return {\n                type: \"boolean\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        default:\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n      }\n    }\n\n    flowEnumMemberRaw() {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n        type: \"none\",\n        pos\n      };\n      return {\n        id,\n        init\n      };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n      const {\n        explicitType\n      } = context;\n\n      if (explicitType === null) {\n        return;\n      }\n\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType\n    }) {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: []\n      };\n\n      while (!this.match(types.braceR)) {\n        const memberNode = this.startNode();\n        const {\n          id,\n          init\n        } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n\n        if (memberName === \"\") {\n          continue;\n        }\n\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        seenNames.add(memberName);\n        const context = {\n          enumName,\n          explicitType,\n          memberName\n        };\n        memberNode.id = id;\n\n        switch (init.type) {\n          case \"boolean\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n              memberNode.init = init.value;\n              members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n              break;\n            }\n\n          case \"number\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n              memberNode.init = init.value;\n              members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n              break;\n            }\n\n          case \"string\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n              memberNode.init = init.value;\n              members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n              break;\n            }\n\n          case \"invalid\":\n            {\n              throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n            }\n\n          case \"none\":\n            {\n              switch (explicitType) {\n                case \"boolean\":\n                  this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                  break;\n\n                case \"number\":\n                  this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                  break;\n\n                default:\n                  members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n              }\n            }\n        }\n\n        if (!this.match(types.braceR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      return members;\n    }\n\n    flowEnumStringMembers(initializedMembers, defaultedMembers, {\n      enumName\n    }) {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (let _i = 0; _i < initializedMembers.length; _i++) {\n          const member = initializedMembers[_i];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return defaultedMembers;\n      } else {\n        for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n          const member = defaultedMembers[_i2];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName\n    }) {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(types.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null\n          });\n        }\n\n        const {\n          value\n        } = this.state;\n        this.next();\n\n        if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value\n          });\n        }\n\n        return value;\n      }\n\n      return null;\n    }\n\n    flowEnumBody(node, {\n      enumName,\n      nameLoc\n    }) {\n      const explicitType = this.flowEnumParseExplicitType({\n        enumName\n      });\n      this.expect(types.braceL);\n      const members = this.flowEnumMembers({\n        enumName,\n        explicitType\n      });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n            enumName\n          });\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n\n        default:\n          {\n            const empty = () => {\n              node.members = [];\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            };\n\n            node.explicitType = false;\n            const boolsLen = members.booleanMembers.length;\n            const numsLen = members.numberMembers.length;\n            const strsLen = members.stringMembers.length;\n            const defaultedLen = members.defaultedMembers.length;\n\n            if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n              return empty();\n            } else if (!boolsLen && !numsLen) {\n              node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                enumName\n              });\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n              for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n                const member = _members$defaultedMem[_i3];\n                this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.booleanMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumBooleanBody\");\n            } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n              for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n                const member = _members$defaultedMem2[_i4];\n                this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.numberMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumNumberBody\");\n            } else {\n              this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n                enumName\n              });\n              return empty();\n            }\n          }\n      }\n    }\n\n    flowParseEnumDeclaration(node) {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType) {\n      if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n\n    isLookaheadToken_lt() {\n      const next = this.nextTokenStart();\n\n      if (this.input.charCodeAt(next) === 60) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return afterNext !== 60 && afterNext !== 61;\n      }\n\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n\n  }, _temp;\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n};\n\nclass Scope {\n  constructor(flags) {\n    this.flags = void 0;\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return (this.match(types.bracketL) || this.match(types.braceL) || this.match(types.star) || this.match(types.ellipsis) || this.match(types.hash) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers) {\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modified, modifier)) {\n        this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n      }\n\n      modified[modifier] = true;\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types.question);\n    const labeled = this.eat(types.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.bigint:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types.bigint:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types.num && nextToken.type !== types.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    return this.tsInDeclareContext(() => {\n      switch (starttype) {\n        case types._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types._const:\n          if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers !== undefined) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      if (allowModifiers === false && (accessibility || readonly)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isDeclareContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n      const ahead = this.lookahead();\n\n      if (this.match(types.name) && ahead.type === types.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n\n      if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n        node.importKind = \"type\";\n        this.next();\n      }\n    }\n\n    if (!node.importKind) {\n      node.importKind = \"value\";\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state) {\n    this.tsParseModifiers(member, [\"declare\"]);\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    this.tsParseModifiers(member, [\"declare\"]);\n\n    const callParseClassMember = () => {\n      super.parseClassMember(classBody, member, state);\n    };\n\n    if (member.declare) {\n      this.tsInDeclareContext(callParseClassMember);\n    } else {\n      callParseClassMember();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (isStatic) {\n        this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isDeclareContext && this.match(types.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) == null ? void 0 : _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) == null ? void 0 : _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isDeclareContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInDeclareContext(cb) {\n    const oldIsDeclareContext = this.state.isDeclareContext;\n    this.state.isDeclareContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isDeclareContext = oldIsDeclareContext;\n    }\n  }\n\n};\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers == null ? void 0 : specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (hasPlugin(plugins, \"importAssertions\")) {\n      throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n    }\n\n    const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.isDeclareContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.octalPositions = [];\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types.braceHashL);\n      } else {\n        this.finishToken(types.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else {\n      this.finishOp(types.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n\n      if (this.state.strict) {\n        this.raise(start, ErrorMessages.StrictOctalLiteral);\n      } else {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else if (this.state.strict) {\n          this.raise(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, ErrorMessages.StrictNumericEscape);\n            } else {\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types.name) || !!this.state.type.keyword || this.match(types.string) || this.match(types.num) || this.match(types.bigint) || this.match(types.decimal);\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser == null ? void 0 : parser.options.ranges) this.range = [pos, 0];\n    if (parser == null ? void 0 : parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObjectLike(types.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, message) {\n    this.errors.set(pos, message);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, message) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, message);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, message);\n  }\n\n  recordParenthesizedIdentifierError(pos, message) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, message);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, message);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, message) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, message);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((message, pos) => {\n      this.raise(pos, message);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.type === \"ObjectMethod\" || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        if (op === types.exponent && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    }\n\n    const update = this.match(types.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if ((arg.type === \"MemberExpression\" || arg.type === \"OptionalMemberExpression\") && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    return this.parseUpdate(node, update, refExpressionErrors);\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      state.optionalChainMember = optional = true;\n\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n    }\n\n    if (!noCalls && this.match(types.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types.bracketL) || this.eat(types.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n\n    if (property.type === \"PrivateName\") {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(property.id.name, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (!this.hasPlugin(\"moduleAttributes\")) {\n          this.expectPlugin(\"importAssertions\");\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (let _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n          const arg = _node$arguments[_i];\n\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        return this.parseSuper();\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types$1.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types$1.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types.name)) {\n              return this.parseAsyncArrowUnaryFunction(id);\n            }\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          return this.parseDo();\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketBarL:\n      case types.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types.bracketL:\n        {\n          return this.parseArrayLike(types.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types.braceBarL:\n      case types.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types.braceBarL ? types.braceBarR : types.braceR, false, true, refExpressionErrors);\n        }\n\n      case types.braceL:\n        {\n          return this.parseObjectLike(types.braceR, false, false, refExpressionErrors);\n        }\n\n      case types._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNewOrNewTarget();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n\n          const nextCh = this.input.codePointAt(this.state.end);\n\n          if (isIdentifierStart(nextCh) || nextCh === 92) {\n            const start = this.state.start;\n            node = this.parseMaybePrivateName(true);\n\n            if (this.match(types._in)) {\n              this.expectPlugin(\"privateIn\");\n              this.classScope.usePrivateName(node.id.name, node.start);\n            } else if (this.hasPlugin(\"privateIn\")) {\n              this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n            } else {\n              throw this.unexpected(start);\n            }\n\n            return node;\n          }\n        }\n\n      case types.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo() {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = ErrorMessages.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && prop.type !== \"ObjectProperty\" && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.exprAllowed = false;\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) || this.match(types.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (let _i2 = 0, _node$params = node.params; _i2 < _node$params.length; _i2++) {\n      const param = _node$params[_i2];\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types._class || type === types._function) && (curContext === types$1.functionStatement || curContext === types$1.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case types._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, ErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init, true);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (this.state.strict && octalPositions.length) {\n      for (let _i3 = 0; _i3 < octalPositions.length; _i3++) {\n        const pos = octalPositions[_i3];\n        this.raise(pos, ErrorMessages.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      constructorAllowsSuper,\n      hadConstructor: false,\n      hadStaticBlock: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types.braceL)) {\n        this.parseClassStaticBlock(classBody, member, state);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassElementName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, ErrorMessages.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  parseClassStaticBlock(classBody, member, state) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types.braceR);\n    this.prodParam.exit();\n    this.expressionScope.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if (state.hadStaticBlock) {\n      this.raise(member.start, ErrorMessages.DuplicateStaticBlock);\n    }\n\n    if ((_member$decorators = member.decorators) == null ? void 0 : _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n\n    state.hadStaticBlock = true;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(node.key.id.name, CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation || this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i4 = 0, _node$specifiers = node.specifiers; _i4 < _node$specifiers.length; _i4++) {\n          const specifier = _node$specifiers[_i4];\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type === \"StringLiteral\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.extra.raw, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i5 = 0, _node$declaration$dec = node.declaration.declarations; _i5 < _node$declaration$dec.length; _i5++) {\n            const declaration = _node$declaration$dec[_i5];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i6 = 0, _node$properties = node.properties; _i6 < _node$properties.length; _i6++) {\n        const prop = _node$properties[_i6];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i7 = 0, _node$elements = node.elements; _i7 < _node$elements.length; _i7++) {\n        const elem = _node$elements[_i7];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types.string)) {\n      this.expectPlugin(\"moduleStringNames\");\n      const result = this.parseLiteral(this.state.value, \"StringLiteral\");\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (this.match(types.string)) {\n        node.key = this.parseLiteral(keyName, \"StringLiteral\");\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types.colon);\n\n      if (keyName !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);\n      }\n\n      if (attrNames.has(keyName)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types.colon);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (let _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n      const [name, pos] = _Array$from[_i];\n\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (let _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n      classScope = _this$stack[_i2];\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options == null ? void 0 : options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;","map":{"version":3,"sources":["/Users/nidhigupta/Desktop/NMN Apparel Store/Frontend/admin-app/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","decimal","regexp","string","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorMessages","freeze","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","DuplicateStaticBlock","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","errorTemplate","params","raiseWithData","data","message","replace","_","_raise","errorContext","err","SyntaxError","errorRecovery","isLookahead","errors","isSimpleProperty","kind","method","estree","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","bigInt","BigInt","String","estreeParseDecimalLiteral","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","raw","extra","finishNodeAt","initFunction","isAsync","checkDeclaration","getObjectOrClassMethodParams","checkLVal","expr","contextDescription","args","forEach","prop","checkProto","isRecord","protoRef","refExpressionErrors","isValidDirective","_stmt$expression$extr","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","isAccessor","shorthand","parseObjectProperty","toAssignable","isLHS","toAssignableObjectExpressionProp","key","finishCallExpression","optional","callee","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","TokContext","isExpr","preserveSpace","override","types$1","braceStatement","braceExpression","recordExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","isIterator","braceIsBlock","statementParens","hasPrecedingLineBreak","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords$1","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","isIteratorStart","current","next","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","_temp","flowPragma","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","scope","declareName","enter","bodyNode","parseImport","exit","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","_node$extra","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","getTokenFromCode","charCodeAt","finishOp","readWord","isBinding","element","operator","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","maybeInArrowParameters","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","j_oTag","j_expr","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","add","flowEnumStringMembers","initializedMembers","_i","_i2","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","_i3","_members$defaultedMem","_i4","_members$defaultedMem2","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","bindingType","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","nonNull","x","assert","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","IndexSignatureHasDeclare","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TypeAnnotationAfterAssign","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","typescript","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","isLiteralPropertyName","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsParseModifiers","modified","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","containsEsc","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","prodParam","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","tsInDeclareContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","isDeclareContext","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","parseStatementContent","callParseClassMember","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","parseBindingAtom","parseMaybeDecoratorArguments","readToken_lt_gt","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsDeclareContext","placeholder","placeholders","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","identifier","some","Array","isArray","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","join","moduleAttributesVerionPluginOption","mixinPlugins","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","_Object$keys","State","potentialArrowAt","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","octalPositions","exportedIdentifiers","tokensLength","curPosition","skipArrays","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","pushToken","checkKeywordEscapes","old","curr","skip","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","octal","n","readWord1","escStart","identifierCheck","esc","parent","update","UtilParser","addExtra","op","nameStart","nameEnd","messageOrType","missingPlugin","expectOnePlugin","names","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","_node$extra3","expressionScope","recordParenthesizedIdentifierError","_node$extra2","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","first","checkCommaAfterRest","parseDecorator","_startLoc","_startPos","_left","checkClashes","disallowLetBinding","strictModeChanged","_expr$properties","_expr$elements","elem","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","ExpressionParser","computed","used","shouldExitDescending","getExpression","paramFlags","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","isDelete","parseUpdate","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseMaybePrivateName","classScope","usePrivateName","parseNoCallExpr","tag","quasi","_node$arguments","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","nextCh","lookaheadCh","oldLabels","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","checkGetterSetterParams","_params","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","_node$params","reservedTest","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","StatementParser","interpreter","parseInterpreterDirective","_Array$from","from","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","finalizer","_this$state$labels","statementStart","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","constructorAllowsSuper","hadConstructor","hadStaticBlock","parseClassStaticBlock","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","_member$decorators","declarePrivateName","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","_node$specifiers","exportedName","_i5","_node$declaration$dec","_i6","_node$properties","_i7","_node$elements","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","_this$stack","Parser","pluginsMap","pluginMap","_options","getParser","ast","_unused","moduleError","_unused2","getParserClass","parserClassCache","pluginsFromOptions","pluginList","tokTypes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  DuplicateStaticBlock: \"Duplicate static block in the same class\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { %0 as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, errorTemplate, ...params) {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = (superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, \"object destructuring pattern\", ...args);\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n    }\n  }\n\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.method) {\n      return;\n    }\n\n    super.checkProto(prop, isRecord, protoRef, refExpressionErrors);\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) == null ? void 0 : _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types.decimal:\n        return this.estreeParseDecimalLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n});\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = void 0;\n    this.isExpr = void 0;\n    this.preserveSpace = void 0;\n    this.override = void 0;\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && this.hasPrecedingLineBreak()) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.braceHashL.updateContext = function () {\n  this.state.context.push(types$1.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords$1 = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst SCOPE_OTHER = 0b00000000,\n      SCOPE_PROGRAM = 0b00000001,\n      SCOPE_FUNCTION = 0b00000010,\n      SCOPE_ARROW = 0b00000100,\n      SCOPE_SIMPLE_CATCH = 0b00001000,\n      SCOPE_SUPER = 0b00010000,\n      SCOPE_DIRECT_SUPER = 0b00100000,\n      SCOPE_CLASS = 0b01000000,\n      SCOPE_TS_MODULE = 0b10000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => {\n  var _temp;\n\n  return _temp = class extends superClass {\n    constructor(options, input) {\n      super(options, input);\n      this.flowPragma = void 0;\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes() {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums() {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type, val) {\n      if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment) {\n      if (this.flowPragma === undefined) {\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n        if (!matches) ; else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || types.colon);\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate() {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(types.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n\n      if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n\n      if (this.eat(types.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(types.colon);\n      let type = null;\n      let predicate = null;\n\n      if (this.match(types.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n\n        if (this.match(types.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node) {\n      this.next();\n      this.flowParseInterfaceish(node, true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(node) {\n      this.next();\n      const id = node.id = this.parseIdentifier();\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(types.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(types.parenR);\n      [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n      this.resetEndLocation(id);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(node, insideModule) {\n      if (this.match(types._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(types._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(types._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(types.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(types._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(node) {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(true);\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node) {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(types.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = node.body = this.startNode();\n      const body = bodyNode.body = [];\n      this.expect(types.braceL);\n\n      while (!this.match(types.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(types._import)) {\n          this.next();\n\n          if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n            this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n          }\n\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n      this.expect(types.braceR);\n      this.finishNode(bodyNode, \"BlockStatement\");\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n          }\n\n          if (kind === \"ES\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(node, insideModule) {\n      this.expect(types._export);\n\n      if (this.eat(types._default)) {\n        if (this.match(types._function) || this.match(types._class)) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n\n        node.default = true;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n          throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n        }\n\n        if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n            node.default = false;\n            return this.finishNode(node, \"DeclareExportDeclaration\");\n          } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n            node = this.parseExport(node);\n\n            if (node.type === \"ExportNamedDeclaration\") {\n              node.type = \"ExportDeclaration\";\n              node.default = false;\n              delete node.exportKind;\n            }\n\n            node.type = \"Declare\" + node.type;\n            return node;\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(node) {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(node) {\n      this.next();\n      this.flowParseTypeAlias(node);\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(node) {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(node) {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    flowParseInterfaceish(node, isClass = false) {\n      node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n      this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false\n      });\n    }\n\n    flowParseInterfaceExtends() {\n      const node = this.startNode();\n      node.id = this.flowParseQualifiedTypeIdentifier();\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node) {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word, startLoc, declaration) {\n      if (!reservedTypes.has(word)) return;\n      this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n    }\n\n    flowParseRestrictedIdentifier(liberal, declaration) {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    flowParseTypeAlias(node) {\n      node.id = this.flowParseRestrictedIdentifier(false, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(types.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(node, declare) {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(true, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.supertype = null;\n\n      if (this.match(types.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(types.colon);\n      }\n\n      node.impltype = null;\n\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(types.eq);\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    flowParseTypeParameter(requireDefault = false) {\n      const nodeStart = this.state.start;\n      const node = this.startNode();\n      const variance = this.flowParseVariance();\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(types.eq)) {\n        this.eat(types.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration() {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n      this.state.inType = true;\n\n      if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      } while (!this.isRelational(\">\"));\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType() {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n      node.extends = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false\n      });\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey() {\n      return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(node, isStatic, variance) {\n      node.static = isStatic;\n\n      if (this.lookahead().type === types.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n\n      this.expect(types.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(node, isStatic) {\n      node.static = isStatic;\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(types.bracketR);\n      this.expect(types.bracketR);\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n      } else {\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n      }\n\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(node) {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(types.parenL);\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n\n      this.expect(types.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(node, isStatic) {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    }) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const nodeStart = this.startNode();\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n      let endDelim;\n      let exact;\n      let inexact = false;\n\n      if (allowExact && this.match(types.braceBarL)) {\n        this.expect(types.braceBarL);\n        endDelim = types.braceBarR;\n        exact = true;\n      } else {\n        this.expect(types.braceL);\n        endDelim = types.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart = null;\n        let inexactStart = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(types.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (this.eat(types.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n          } else {\n            nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n          }\n        } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n\n            if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n          this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n        }\n      }\n\n      this.expect(endDelim);\n\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n      this.state.inType = oldInType;\n      return out;\n    }\n\n    flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n      if (this.eat(types.ellipsis)) {\n        const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n        let optional = false;\n\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n          node.method = false;\n\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    flowCheckGetterSetterParams(property) {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, ErrorMessages.BadGetterArity);\n        } else {\n          this.raise(start, ErrorMessages.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, ErrorMessages.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon() {\n      if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(types.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(startPos, startLoc, id) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType() {\n      const node = this.startNode();\n      this.expect(types._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType() {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(types.bracketL);\n\n      while (this.state.pos < this.length && !this.match(types.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(types.bracketR)) break;\n        this.expect(types.comma);\n      }\n\n      this.expect(types.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam() {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n\n      if (lh.type === types.colon || lh.type === types.question) {\n        name = this.parseIdentifier();\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(type) {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params = []) {\n      let rest = null;\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n\n      return {\n        params,\n        rest\n      };\n    }\n\n    flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    flowParsePrimaryType() {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case types.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n        case types.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true\n          });\n\n        case types.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false\n          });\n\n        case types.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case types.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(types.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(types.parenR);\n            this.expect(types.arrow);\n            node.returnType = this.flowParseType();\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n\n          break;\n\n        case types.parenL:\n          this.next();\n\n          if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n            if (this.match(types.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== types.question && token !== types.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n              this.expect(types.parenR);\n              return type;\n            } else {\n              this.eat(types.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case types.string:\n          return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n        case types._true:\n        case types._false:\n          node.value = this.match(types._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case types.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n\n            if (this.match(types.num)) {\n              return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            if (this.match(types.bigint)) {\n              return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n          }\n\n          throw this.unexpected();\n\n        case types.num:\n          return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n        case types.bigint:\n          return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n        case types._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case types._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case types._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case types.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType() {\n      const startPos = this.state.start,\n            startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n\n      while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(types.bracketL);\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n\n      return type;\n    }\n\n    flowParsePrefixType() {\n      const node = this.startNode();\n\n      if (this.eat(types.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens() {\n      const param = this.flowParsePrefixType();\n\n      if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n\n      return param;\n    }\n\n    flowParseIntersectionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation() {\n      if (this.state.type === types.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation() {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n      const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n      if (this.match(types.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n\n      return ident;\n    }\n\n    typeCastToParameter(node) {\n      node.expression.typeAnnotation = node.typeAnnotation;\n      this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n      return node.expression;\n    }\n\n    flowParseVariance() {\n      let variance = null;\n\n      if (this.match(types.plusMin)) {\n        variance = this.startNode();\n\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n\n      return variance;\n    }\n\n    parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(node, type, isMethod = false) {\n      if (this.match(types.colon)) {\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    parseStatement(context, topLevel) {\n      if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type === types.name || isKeyword(lookahead.value)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n\n    parseExpressionStatement(node, expr) {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(types.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    shouldParseExportDeclaration() {\n      return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier() {\n      if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n      if (!this.match(types.question)) return expr;\n\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n        if (!result.node) {\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(types.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let {\n        consequent,\n        failed\n      } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(types.colon);\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent() {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(types.colon);\n      this.state.noArrowParamsConversionAt.pop();\n      return {\n        consequent,\n        failed\n      };\n    }\n\n    getArrowLikeExpressions(node, disallowInvalid) {\n      const stack = [node];\n      const arrows = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n    }\n\n    finishArrowValidation(node) {\n      var _node$extra;\n\n      this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt(node, parse) {\n      let result;\n\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(node, startPos, startLoc) {\n      node = super.parseParenItem(node, startPos, startLoc);\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(types.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node) {\n      if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node) {\n      const decl = super.parseExport(node);\n\n      if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n\n      return decl;\n    }\n\n    parseExportDeclaration(node) {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(types.braceL)) {\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node) {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node) {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n\n      return hasNamespace;\n    }\n\n    parseClassId(node, isStatement, optionalId) {\n      super.parseClassId(node, isStatement, optionalId);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(classBody, member, state) {\n      const pos = this.state.start;\n\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n        }\n      }\n    }\n\n    getTokenFromCode(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 123 && next === 124) {\n        return this.finishOp(types.braceBarL, 2);\n      } else if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(types.relational, 1);\n      } else if (this.state.inType && code === 63) {\n        return this.finishOp(types.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node, isBinding) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\":\n          {\n            const last = node.properties.length - 1;\n            return node.properties.every((prop, i) => {\n              return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n            });\n          }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node, isLHS = false) {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableList(exprList, trailingCommaPos, isLHS) {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n\n        if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    toReferencedList(exprList, isParenthesizedExpr) {\n      for (let i = 0; i < exprList.length; i++) {\n        var _expr$extra;\n\n        const expr = exprList[i];\n\n        if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) == null ? void 0 : _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n      const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(expr, ...args) {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    parseClassProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassPrivateProperty(node);\n    }\n\n    isClassMethod() {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty() {\n      return this.match(types.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method) {\n      return !this.match(types.colon) && super.isNonstaticConstructor(method);\n    }\n\n    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    }\n\n    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node) {\n      super.parseClassSuper(node);\n\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented = node.implements = [];\n\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(true);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(types.comma));\n      }\n    }\n\n    parsePropertyName(node, isPrivateNameAllowed) {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      node.variance = variance;\n      return key;\n    }\n\n    parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n      if (prop.variance) {\n        this.unexpected(prop.variance.start);\n      }\n\n      delete prop.variance;\n      let typeParameters;\n\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(types.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param) {\n      if (this.eat(types.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        param.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(startPos, startLoc, left) {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node) {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n      specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    maybeParseDefaultImportSpecifier(node) {\n      node.importKind = \"value\";\n      let kind = null;\n\n      if (this.match(types._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n\n      if (kind) {\n        const lh = this.lookahead();\n\n        if (kind === \"type\" && lh.type === types.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    parseImportSpecifier(node) {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseModuleExportName();\n      let specifierTypeKind = null;\n\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n\n        if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        if (firstIdent.type === \"StringLiteral\") {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(specifier.local.name, specifier.local.start, true);\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseFunctionParams(node, allowModifiers) {\n      const kind = node.kind;\n\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    parseVarId(decl, kind) {\n      super.parseVarId(decl, kind);\n\n      if (this.match(types.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id);\n      }\n    }\n\n    parseAsyncArrowFromCallExpression(node, call) {\n      if (this.match(types.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    shouldParseAsyncArrow() {\n      return this.match(types.colon) || super.shouldParseAsyncArrow();\n    }\n\n    parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var _jsx;\n\n      let state = null;\n      let jsx;\n\n      if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n        state = this.state.clone();\n        jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n        if (!jsx.error) return jsx.node;\n        const {\n          context\n        } = this.state;\n\n        if (context[context.length - 1] === types$1.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === types$1.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (((_jsx = jsx) == null ? void 0 : _jsx.error) || this.isRelational(\"<\")) {\n        var _jsx2, _jsx3;\n\n        state = state || this.state.clone();\n        let typeParameters;\n        const arrow = this.tryParse(abort => {\n          var _arrowExpression$extr;\n\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n            const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n            this.resetStartLocationFromNode(result, typeParameters);\n            return result;\n          });\n\n          if (arrowExpression.type !== \"ArrowFunctionExpression\" && ((_arrowExpression$extr = arrowExpression.extra) == null ? void 0 : _arrowExpression$extr.parenthesized)) {\n            abort();\n          }\n\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n          return arrowExpression;\n        }, state);\n        let arrowExpression = null;\n\n        if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n          if (!arrow.error && !arrow.aborted) {\n            if (arrow.node.async) {\n              this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n        throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n    }\n\n    parseArrow(node) {\n      if (this.match(types.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          const typeNode = this.startNode();\n          [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(types.arrow)) this.unexpected();\n          return typeNode;\n        });\n        if (result.thrown) return null;\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow() {\n      return this.match(types.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(node, params) {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(node, allowDuplicates, isArrowFunction) {\n      if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow) {\n      return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n    }\n\n    parseSubscripts(base, startPos, startLoc, noCalls) {\n      if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n        const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n      if (this.match(types.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, true);\n      } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(types.parenL);\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(node, subscriptState.optionalChainMember);\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n    }\n\n    parseNewArguments(node) {\n      let targs = null;\n\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n      }\n\n      node.typeArguments = targs;\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(node, undefined, true);\n    }\n\n    readToken_mult_modulo(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 42 && next === 47 && this.state.hasFlowComment) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 124 && next === 125) {\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file, program) {\n      const fileNode = super.parseTopLevel(file, program);\n\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n\n      return fileNode;\n    }\n\n    skipBlockComment() {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n        }\n\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment() {\n      const {\n        pos\n      } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n\n      while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === 58 && ch3 === 58) {\n        return shiftToFirstNonWhiteSpace + 2;\n      }\n\n      if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n        return shiftToFirstNonWhiteSpace + 12;\n      }\n\n      if (ch2 === 58 && ch3 !== 58) {\n        return shiftToFirstNonWhiteSpace;\n      }\n\n      return false;\n    }\n\n    hasFlowCommentCompletion() {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n      }\n    }\n\n    flowEnumErrorBooleanMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n    }\n\n    flowEnumErrorInvalidMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n    }\n\n    flowEnumErrorDuplicateMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(pos, {\n      enumName,\n      suppliedType\n    }) {\n      return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n    }\n\n    flowEnumErrorInvalidMemberInitializer(pos, {\n      enumName,\n      explicitType,\n      memberName\n    }) {\n      let message = null;\n\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n\n        default:\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n    }\n\n    flowEnumMemberInit() {\n      const startPos = this.state.start;\n\n      const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n      switch (this.state.type) {\n        case types.num:\n          {\n            const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"number\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types.string:\n          {\n            const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"string\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types._true:\n        case types._false:\n          {\n            const literal = this.parseBooleanLiteral();\n\n            if (endOfInit()) {\n              return {\n                type: \"boolean\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        default:\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n      }\n    }\n\n    flowEnumMemberRaw() {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n        type: \"none\",\n        pos\n      };\n      return {\n        id,\n        init\n      };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n      const {\n        explicitType\n      } = context;\n\n      if (explicitType === null) {\n        return;\n      }\n\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType\n    }) {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: []\n      };\n\n      while (!this.match(types.braceR)) {\n        const memberNode = this.startNode();\n        const {\n          id,\n          init\n        } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n\n        if (memberName === \"\") {\n          continue;\n        }\n\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        seenNames.add(memberName);\n        const context = {\n          enumName,\n          explicitType,\n          memberName\n        };\n        memberNode.id = id;\n\n        switch (init.type) {\n          case \"boolean\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n              memberNode.init = init.value;\n              members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n              break;\n            }\n\n          case \"number\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n              memberNode.init = init.value;\n              members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n              break;\n            }\n\n          case \"string\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n              memberNode.init = init.value;\n              members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n              break;\n            }\n\n          case \"invalid\":\n            {\n              throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n            }\n\n          case \"none\":\n            {\n              switch (explicitType) {\n                case \"boolean\":\n                  this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                  break;\n\n                case \"number\":\n                  this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                  break;\n\n                default:\n                  members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n              }\n            }\n        }\n\n        if (!this.match(types.braceR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      return members;\n    }\n\n    flowEnumStringMembers(initializedMembers, defaultedMembers, {\n      enumName\n    }) {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (let _i = 0; _i < initializedMembers.length; _i++) {\n          const member = initializedMembers[_i];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return defaultedMembers;\n      } else {\n        for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n          const member = defaultedMembers[_i2];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName\n    }) {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(types.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null\n          });\n        }\n\n        const {\n          value\n        } = this.state;\n        this.next();\n\n        if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value\n          });\n        }\n\n        return value;\n      }\n\n      return null;\n    }\n\n    flowEnumBody(node, {\n      enumName,\n      nameLoc\n    }) {\n      const explicitType = this.flowEnumParseExplicitType({\n        enumName\n      });\n      this.expect(types.braceL);\n      const members = this.flowEnumMembers({\n        enumName,\n        explicitType\n      });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n            enumName\n          });\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n\n        default:\n          {\n            const empty = () => {\n              node.members = [];\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            };\n\n            node.explicitType = false;\n            const boolsLen = members.booleanMembers.length;\n            const numsLen = members.numberMembers.length;\n            const strsLen = members.stringMembers.length;\n            const defaultedLen = members.defaultedMembers.length;\n\n            if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n              return empty();\n            } else if (!boolsLen && !numsLen) {\n              node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                enumName\n              });\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n              for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n                const member = _members$defaultedMem[_i3];\n                this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.booleanMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumBooleanBody\");\n            } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n              for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n                const member = _members$defaultedMem2[_i4];\n                this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.numberMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumNumberBody\");\n            } else {\n              this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n                enumName\n              });\n              return empty();\n            }\n          }\n      }\n    }\n\n    flowParseEnumDeclaration(node) {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType) {\n      if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n\n    isLookaheadToken_lt() {\n      const next = this.nextTokenStart();\n\n      if (this.input.charCodeAt(next) === 60) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return afterNext !== 60 && afterNext !== 61;\n      }\n\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n\n  }, _temp;\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n});\n\nclass Scope {\n  constructor(flags) {\n    this.flags = void 0;\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return (this.match(types.bracketL) || this.match(types.braceL) || this.match(types.star) || this.match(types.ellipsis) || this.match(types.hash) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers) {\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modified, modifier)) {\n        this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n      }\n\n      modified[modifier] = true;\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types.question);\n    const labeled = this.eat(types.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.bigint:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types.bigint:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types.num && nextToken.type !== types.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    return this.tsInDeclareContext(() => {\n      switch (starttype) {\n        case types._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types._const:\n          if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers !== undefined) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      if (allowModifiers === false && (accessibility || readonly)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isDeclareContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n      const ahead = this.lookahead();\n\n      if (this.match(types.name) && ahead.type === types.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n\n      if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n        node.importKind = \"type\";\n        this.next();\n      }\n    }\n\n    if (!node.importKind) {\n      node.importKind = \"value\";\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state) {\n    this.tsParseModifiers(member, [\"declare\"]);\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    this.tsParseModifiers(member, [\"declare\"]);\n\n    const callParseClassMember = () => {\n      super.parseClassMember(classBody, member, state);\n    };\n\n    if (member.declare) {\n      this.tsInDeclareContext(callParseClassMember);\n    } else {\n      callParseClassMember();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (isStatic) {\n        this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isDeclareContext && this.match(types.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) == null ? void 0 : _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) == null ? void 0 : _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isDeclareContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInDeclareContext(cb) {\n    const oldIsDeclareContext = this.state.isDeclareContext;\n    this.state.isDeclareContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isDeclareContext = oldIsDeclareContext;\n    }\n  }\n\n});\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers == null ? void 0 : specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (hasPlugin(plugins, \"importAssertions\")) {\n      throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n    }\n\n    const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.isDeclareContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.octalPositions = [];\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types.braceHashL);\n      } else {\n        this.finishToken(types.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else {\n      this.finishOp(types.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n\n      if (this.state.strict) {\n        this.raise(start, ErrorMessages.StrictOctalLiteral);\n      } else {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else if (this.state.strict) {\n          this.raise(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, ErrorMessages.StrictNumericEscape);\n            } else {\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types.name) || !!this.state.type.keyword || this.match(types.string) || this.match(types.num) || this.match(types.bigint) || this.match(types.decimal);\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser == null ? void 0 : parser.options.ranges) this.range = [pos, 0];\n    if (parser == null ? void 0 : parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObjectLike(types.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, message) {\n    this.errors.set(pos, message);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, message) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, message);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, message);\n  }\n\n  recordParenthesizedIdentifierError(pos, message) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, message);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, message);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, message) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, message);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((message, pos) => {\n      this.raise(pos, message);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.type === \"ObjectMethod\" || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        if (op === types.exponent && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    }\n\n    const update = this.match(types.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if ((arg.type === \"MemberExpression\" || arg.type === \"OptionalMemberExpression\") && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    return this.parseUpdate(node, update, refExpressionErrors);\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      state.optionalChainMember = optional = true;\n\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n    }\n\n    if (!noCalls && this.match(types.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types.bracketL) || this.eat(types.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n\n    if (property.type === \"PrivateName\") {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(property.id.name, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (!this.hasPlugin(\"moduleAttributes\")) {\n          this.expectPlugin(\"importAssertions\");\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (let _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n          const arg = _node$arguments[_i];\n\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        return this.parseSuper();\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types$1.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types$1.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types.name)) {\n              return this.parseAsyncArrowUnaryFunction(id);\n            }\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          return this.parseDo();\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketBarL:\n      case types.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types.bracketL:\n        {\n          return this.parseArrayLike(types.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types.braceBarL:\n      case types.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types.braceBarL ? types.braceBarR : types.braceR, false, true, refExpressionErrors);\n        }\n\n      case types.braceL:\n        {\n          return this.parseObjectLike(types.braceR, false, false, refExpressionErrors);\n        }\n\n      case types._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNewOrNewTarget();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n\n          const nextCh = this.input.codePointAt(this.state.end);\n\n          if (isIdentifierStart(nextCh) || nextCh === 92) {\n            const start = this.state.start;\n            node = this.parseMaybePrivateName(true);\n\n            if (this.match(types._in)) {\n              this.expectPlugin(\"privateIn\");\n              this.classScope.usePrivateName(node.id.name, node.start);\n            } else if (this.hasPlugin(\"privateIn\")) {\n              this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n            } else {\n              throw this.unexpected(start);\n            }\n\n            return node;\n          }\n        }\n\n      case types.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo() {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = ErrorMessages.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && prop.type !== \"ObjectProperty\" && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.exprAllowed = false;\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) || this.match(types.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (let _i2 = 0, _node$params = node.params; _i2 < _node$params.length; _i2++) {\n      const param = _node$params[_i2];\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types._class || type === types._function) && (curContext === types$1.functionStatement || curContext === types$1.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n        }\n\n      case types._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, ErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init, true);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (this.state.strict && octalPositions.length) {\n      for (let _i3 = 0; _i3 < octalPositions.length; _i3++) {\n        const pos = octalPositions[_i3];\n        this.raise(pos, ErrorMessages.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      constructorAllowsSuper,\n      hadConstructor: false,\n      hadStaticBlock: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types.braceL)) {\n        this.parseClassStaticBlock(classBody, member, state);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassElementName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, ErrorMessages.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  parseClassStaticBlock(classBody, member, state) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types.braceR);\n    this.prodParam.exit();\n    this.expressionScope.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if (state.hadStaticBlock) {\n      this.raise(member.start, ErrorMessages.DuplicateStaticBlock);\n    }\n\n    if ((_member$decorators = member.decorators) == null ? void 0 : _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n\n    state.hadStaticBlock = true;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(node.key.id.name, CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation || this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i4 = 0, _node$specifiers = node.specifiers; _i4 < _node$specifiers.length; _i4++) {\n          const specifier = _node$specifiers[_i4];\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type === \"StringLiteral\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.extra.raw, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i5 = 0, _node$declaration$dec = node.declaration.declarations; _i5 < _node$declaration$dec.length; _i5++) {\n            const declaration = _node$declaration$dec[_i5];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i6 = 0, _node$properties = node.properties; _i6 < _node$properties.length; _i6++) {\n        const prop = _node$properties[_i6];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i7 = 0, _node$elements = node.elements; _i7 < _node$elements.length; _i7++) {\n        const elem = _node$elements[_i7];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types.string)) {\n      this.expectPlugin(\"moduleStringNames\");\n      const result = this.parseLiteral(this.state.value, \"StringLiteral\");\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n        const attributes = this.maybeParseModuleAttributes();\n\n        if (attributes) {\n          node.attributes = attributes;\n        }\n      }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (this.match(types.string)) {\n        node.key = this.parseLiteral(keyName, \"StringLiteral\");\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types.colon);\n\n      if (keyName !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);\n      }\n\n      if (attrNames.has(keyName)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types.colon);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (let _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n      const [name, pos] = _Array$from[_i];\n\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (let _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n      classScope = _this$stack[_i2];\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options == null ? void 0 : options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}